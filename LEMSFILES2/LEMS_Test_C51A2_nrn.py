'''
Neuron simulator export for:

Components:
    na_s (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: annotation)
    kdr (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: annotation)
    k (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: annotation)
    cal (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    BK (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: annotation)
    cah (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    kca (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: annotation)
    h (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    ca_conc (Type: decayingPoolConcentrationModel_Anwar:  restingConc=0.0 (SI concentration) decayConstant=0.033333333333333 (SI time) shellDepth=1.0E-9 (SI length) Faraday=96485.3 (SI charge_per_mole) AREA_SCALE=1.0 (SI area) LENGTH_SCALE=1.0 (SI length))
    cacc (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    na_a (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    leak (Type: ionChannelPassive:  conductance=1.0E-11 (SI conductance))
    C51A (Type: cell)
    iclamp0 (Type: pulseGenerator:  delay=0.05 (SI time) duration=0.25 (SI time) amplitude=-4.0000000000000007E-10 (SI current))
    iclamp1 (Type: pulseGenerator:  delay=0.05 (SI time) duration=0.25 (SI time) amplitude=-4.0000000000000007E-10 (SI current))
    network_of_C51A (Type: networkWithTemperature:  temperature=310.15 (SI temperature))
    Test (Type: Simulation:  length=10.0 (SI time) step=2.5E-5 (SI time))


    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.7.0
         org.neuroml.model   v1.7.0
         jLEMS               v0.10.2

'''

import neuron

import time
import datetime
import sys

import hashlib
h = neuron.h
h.load_file("stdlib.hoc")

h.load_file("stdgui.hoc")

h("objref p")
h("p = new PythonObject()")

class NeuronSimulation():

    def __init__(self, tstop, dt, seed=12345):

        print("\n    Starting simulation in NEURON of %sms generated from NeuroML2 model...\n"%tstop)

        self.setup_start = time.time()
        self.seed = seed
        self.randoms = []
        self.next_global_id = 0  # Used in Random123 classes for elements using random(), etc. 

        self.next_spiking_input_id = 0  # Used in Random123 classes for elements using random(), etc. 

        '''
        Adding simulation Component(id=Test type=Simulation) of network/component: network_of_C51A (Type: networkWithTemperature:  temperature=310.15 (SI temperature))
        
        '''

        # Temperature used for network: 310.15 K
        h.celsius = 310.15 - 273.15

        # ######################   Population: population_of_C51A
        print("Population population_of_C51A contains 1 instance(s) of component: C51A of type: cell")

        print("Setting the default initial concentrations for ca (used in C51A) to 3.7152 mM (internal), 3.0 mM (external)")
        h("cai0_ca_ion = 3.7152")
        h("cao0_ca_ion = 3.0")

        h.load_file("C51A.hoc")
        a_population_of_C51A = []
        h("{ n_population_of_C51A = 1 }")
        h("objectvar a_population_of_C51A[n_population_of_C51A]")
        for i in range(int(h.n_population_of_C51A)):
            h("a_population_of_C51A[%i] = new C51A()"%i)
            h("access a_population_of_C51A[%i].Soma"%i)

            self.next_global_id+=1

        h("{ a_population_of_C51A[0].position(0.0, 0.0, 0.0) }")

        h("proc initialiseV_population_of_C51A() { for i = 0, n_population_of_C51A-1 { a_population_of_C51A[i].set_initial_v() } }")
        h("objref fih_population_of_C51A")
        h('{fih_population_of_C51A = new FInitializeHandler(0, "initialiseV_population_of_C51A()")}')

        h("proc initialiseIons_population_of_C51A() { for i = 0, n_population_of_C51A-1 { a_population_of_C51A[i].set_initial_ion_properties() } }")
        h("objref fih_ion_population_of_C51A")
        h('{fih_ion_population_of_C51A = new FInitializeHandler(1, "initialiseIons_population_of_C51A()")}')

        print("Processing 1 input lists")

        # ######################   Input List: Iclamp1
        # Adding single input: Component(id=0 type=input)
        h("objref Iclamp1_0")
        h("a_population_of_C51A[0].Soma { Iclamp1_0 = new iclamp1(0.12592115) } ")

        # Adding single input: Component(id=1 type=input)
        h("objref Iclamp1_1")
        h("a_population_of_C51A[0].Soma { Iclamp1_1 = new iclamp1(0.12592115) } ")

        print("Finished processing 1 input lists")

        trec = h.Vector()
        trec.record(h._ref_t)

        h.tstop = tstop

        h.dt = dt

        h.steps_per_ms = 1/h.dt



        # ######################   File to save: Test.vd.dat (file)
        # Column: population_of_C51A/0/C51A/69/v
        h(' objectvar v_69_file ')
        h(' { v_69_file = new Vector() } ')
        h(' { v_69_file.record(&a_population_of_C51A[0].Sec_Comp_35.v(0.4600399)) } ')
        h.v_69_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: population_of_C51A/0/C51A/8/v
        h(' objectvar v_8_file ')
        h(' { v_8_file = new Vector() } ')
        h(' { v_8_file.record(&a_population_of_C51A[0].ExtraSomaSec_Comp_5.v(0.49274448)) } ')
        h.v_8_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: population_of_C51A/0/C51A/0/v
        h(' objectvar v_0_file ')
        h(' { v_0_file = new Vector() } ')
        h(' { v_0_file.record(&a_population_of_C51A[0].Soma.v(0.12592115)) } ')
        h.v_0_file.resize((h.tstop * h.steps_per_ms) + 1)

        # ######################   File to save: time.dat (time)
        # Column: time
        h(' objectvar v_time ')
        h(' { v_time = new Vector() } ')
        h(' { v_time.record(&t) } ')
        h.v_time.resize((h.tstop * h.steps_per_ms) + 1)

        self.initialized = False

        self.sim_end = -1 # will be overwritten

        setup_end = time.time()
        self.setup_time = setup_end - self.setup_start
        print("Setting up the network to simulate took %f seconds"%(self.setup_time))

    def run(self):

        self.initialized = True
        sim_start = time.time()
        print("Running a simulation of %sms (dt = %sms; seed=%s)" % (h.tstop, h.dt, self.seed))

        try:
            h.run()
        except Exception as e:
            print("Exception running NEURON: %s" % (e))
            quit()


        self.sim_end = time.time()
        self.sim_time = self.sim_end - sim_start
        print("Finished NEURON simulation in %f seconds (%f mins)..."%(self.sim_time, self.sim_time/60.0))

        try:
            self.save_results()
        except Exception as e:
            print("Exception saving results of NEURON simulation: %s" % (e))
            quit()


    def advance(self):

        if not self.initialized:
            h.finitialize()
            self.initialized = True

        h.fadvance()


    ###############################################################################
    # Hash function to use in generation of random value
    # This is copied from NetPyNE: https://github.com/Neurosim-lab/netpyne/blob/master/netpyne/simFuncs.py
    ###############################################################################
    def _id32 (self,obj): 
        return int(hashlib.md5(obj.encode('utf-8')).hexdigest()[0:8],16)  # convert 8 first chars of md5 hash in base 16 to int


    ###############################################################################
    # Initialize the stim randomizer
    # This is copied from NetPyNE: https://github.com/Neurosim-lab/netpyne/blob/master/netpyne/simFuncs.py
    ###############################################################################
    def _init_stim_randomizer(self,rand, stimType, gid, seed): 
        #print("INIT STIM  %s; %s; %s; %s"%(rand, stimType, gid, seed))
        rand.Random123(self._id32(stimType), gid, seed)


    def save_results(self):

        print("Saving results at t=%s..."%h.t)

        if self.sim_end < 0: self.sim_end = time.time()


        # ######################   File to save: time.dat (time)
        py_v_time = [ t/1000 for t in h.v_time.to_python() ]  # Convert to Python list for speed...

        f_time_f2 = open('time.dat', 'w')
        num_points = len(py_v_time)  # Simulation may have been stopped before tstop...

        for i in range(num_points):
            f_time_f2.write('%f'% py_v_time[i])  # Save in SI units...
        f_time_f2.close()
        print("Saved data to: time.dat")

        # ######################   File to save: Test.vd.dat (file)
        py_v_69_file = [ float(x  / 1000.0) for x in h.v_69_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_8_file = [ float(x  / 1000.0) for x in h.v_8_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_0_file = [ float(x  / 1000.0) for x in h.v_0_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage

        f_file_f2 = open('Test.vd.dat', 'w')
        num_points = len(py_v_time)  # Simulation may have been stopped before tstop...

        for i in range(num_points):
            f_file_f2.write('%e\t%e\t%e\t%e\t\n' % (py_v_time[i], py_v_69_file[i], py_v_8_file[i], py_v_0_file[i], ))
        f_file_f2.close()
        print("Saved data to: Test.vd.dat")

        save_end = time.time()
        save_time = save_end - self.sim_end
        print("Finished saving results in %f seconds"%(save_time))

        print("Done")

        quit()


if __name__ == '__main__':

    ns = NeuronSimulation(tstop=10000, dt=0.025, seed=12345)

    ns.run()

